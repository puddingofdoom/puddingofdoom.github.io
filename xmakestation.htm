<!doctype html>
<html>
	<head>
		<meta charset="UTF-8" />
		<style type="text/css">
			body { font-family:sans-serif;}
		</style>
		<script type="text/javascript">

			function which() {
				let paste = document.getElementById("paste").value;
				let selected_file = document.getElementById("sbs_file").files[0];

				let sbs_type="none";

				if (paste.length > 0) {
					sbs_type = "paste";
				} else {
					//debug:
					console.log("paste field was empty");
				}

				if (selected_file) {
					sbs_type = "file";
				} else {
					//debug:
					console.log("no file selected");
				}

				return sbs_type;

			}

			function loadsbs() {
				var sbs_contents;

				switch (which()) {
					case "paste":
						findlargegrids(document.getElementById("paste").value);
						break;
					case "file":
						load_from_file(event);
						break;
					case "none":
						console.log("no mode selected, doing nothing");
					default:
						console.log("You really broke it this time!");
				}
				return sbs_contents
			}

			function load_from_file(event) {
				var selected_file = document.getElementById("sbs_file").files[0];
				let reader = new FileReader();

				//reader.onprogress = updateProgress;
				reader.onloadend = function (event, callback) {
					//debug:
					console.log(event.target.result.length);

					findlargegrids(event.target.result);

				};
				//reader.onerror = errorHandler;

				reader.readAsText(selected_file);

				// https://developer.mozilla.org/en-US/docs/Web/API/FileReader/FileReader
				// https://www.javascripture.com/FileReader
				// https://www.w3.org/TR/file-upload/#reading-a-file
			}
			// end function loadsbs()

			function findlargegrids(sbs_contents) {

				var parser, xmlDoc;
				parser = new DOMParser();
				xmlDoc = parser.parseFromString(sbs_contents,"application/xml");

				let temp_top_blocks = xmlDoc.getElementsByTagName("TopBlockId");

				if (typeof(temp_top_blocks) != undefined) {
					let all_top_blocks = Array.from(temp_top_blocks);
					var top_block_ids = [];
					//debug:
					console.log("found " + all_top_blocks.length + " top blocks");

					for (i = 0; i < all_top_blocks.length; i++) {

						//debug:
						console.log("Examining EntityId #" + i + ", " + all_top_blocks[i].parentNode.getElementsByTagName("EntityId")[0].firstChild.textContent + ", " + all_top_blocks[i].parentNode.getElementsByTagName("SubtypeName")[0].firstChild.textContent + " …")
						if (all_top_blocks[i].firstChild) {
							top_block_ids.push(all_top_blocks[i].firstChild.textContent);
							//debug:
							console.log("found TopBlockId " + all_top_blocks[i].firstChild.textContent);
						} else {
							//debug:
							console.log("It has no TopBlockId! Is it empty?");
						}
					}

					// A list of ids of all subgrid blocks that are attached to a parent part,
					//  like wheels to a suspension and rotor tops to rotor bodies.
					// Lack of distinction doesn't matter. Later, we're only checking the topblockid of suspensions,
					//  not of rotors, so we'll only ever look for wheels anyhow.
				}

				let temp = xmlDoc.getElementsByTagName("MyObjectBuilder_EntityBase");

				if (typeof(temp) != undefined) {

					grid_list = Array.from(temp);
					// an array of all grids, including the player(s)!!

					//debug:
					console.log("found " + grid_list.length + " grids");

					for (var i = 0; i < grid_list.length; i++) {

						//debug:
						console.log("---");
						console.log("grid " + i + " is of type " + grid_list[i].getAttribute("xsi:type"));
						
						if (grid_list[i].getAttribute("xsi:type") == "MyObjectBuilder_CubeGrid" && isSuitableGrid(grid_list[i], top_block_ids) == true) {
							// test only cube grids, exclude player(s), and only touch large grids

							//debug:
							console.log("This is a large grid!");

							makeStation(grid_list[i]);

						} else {
							//debug:
							console.log("not a large grid, ignoring it");
						}
					}

					serializer = new XMLSerializer();
					document.getElementById("output").value = serializer.serializeToString(xmlDoc);

				} else {
					//debug:
					console.log("could not find any grids");
				}

			}

			function isSuitableGrid(grid, top_block_ids) {

				let grid_is_suitable = false;
				let temp_size = grid.getElementsByTagName("GridSizeEnum")[0];

				if (typeof(temp_size) != undefined) {

					if (temp_size.firstChild.nodeValue == "Large" && isSuspendedWheel(grid, top_block_ids) == false) {
						//debug:
						console.log("This is a large grid. Setting grid_is_suitable to true.")

						grid_is_suitable = true;

					} else {
						console.log("not a large grid, or is a suspended wheel. grid_is_suitable stays false.")
					}
				} else {
					//debug:
					console.log("strangely, this grid has no size");
				}

				//debug:
				console.log("returning grid_is_suitable as " + grid_is_suitable);

				return grid_is_suitable;
			}

			function isSuspendedWheel(grid, top_block_ids) {
				// iterate through cubelist of grid.
				// If any of the blocks (it'll be only one block, naturally) is a wheel that has an id that is included in top_block_ids list, return true

				let is_suspended_wheel = false;
				let temp = grid.getElementsByTagName("CubeBlocks")[0].getElementsByTagName("MyObjectBuilder_CubeBlock");

				if (typeof(temp) != undefined) {

					let vehicle_blocklist = Array.from(temp);
						// an array of all blocks in the current grid's cubeblock list

					for (var i = 0; i < vehicle_blocklist.length; i++) {

						if (vehicle_blocklist[i].getAttribute("xsi:type") == "MyObjectBuilder_Wheel") {
							// Is a wheel

							//debug:
							console.log("this is a wheel …");
							console.log("its EntityId is " + vehicle_blocklist[i].getElementsByTagName("EntityId")[0].firstChild.nodeValue);

							if (top_block_ids.includes(vehicle_blocklist[i].getElementsByTagName("EntityId")[0].firstChild.nodeValue)) {
								// is a wheel that is attached to some suspension because its EntityId was found when looking for TopBlockIds!!

								//debug:
								console.log("… and it's a suspended wheel!")
								is_suspended_wheel = true;

							} else {
								//debug:
								console.log("… but it's not a suspended wheel.");
							}
						} else {
							//debug:
							console.log("this is not a wheel-type block");
						}
					}
				} else {
					//debug:
					console.log("strangely, this grid's cubelist has no entries. How did you create a non-character grid with no blocks??");
				}

				return is_suspended_wheel;
			}

			function makeStation(grid) {
				// Careful now, don't just nuke the grid into submission.
				// It may already be a station and be supported:
				//  <IsUnsupportedStation>false</IsUnsupportedStation>
				//
				// Add <IsStatic>true</IsStatic>
				// and <IsUnsupportedStation>true</IsUnsupportedStation>
				//  as necessary.


				let existing_isstatic_tag = grid.getElementsByTagName("IsStatic")[0];

				if (typeof(existing_isstatic_tag) != 'undefined' && existing_isstatic_tag != null) {
					// IsStatic tag exists, and may or may not have the content we want.

					//debug:
					console.log("found an IsStatic tag! It's currently set to " + existing_isstatic_tag.firstChild.nodeValue);

					if (existing_isstatic_tag.firstChild.nodeValue == "false") {
						// is set to false, but we like it to be true

						//debug:
						console.log("existing IsStatic is not how we like it, setting to true")

						existing_isstatic_tag.firstChild.nodeValue = "true"

					} else {
						// is true, so we don't do anything with it

						//debug:
						console.log("existing IsStatic tag is set to true, not doing anything")
					}

					//now testing for isunsupported tag, and creating if missing, but leaving it at whatever if present:
					createUnsupportedTag(grid);

					//existing_isstatic_tag.parentNode.removeChild(existing_isstatic_tag);

				} else {
					// no IsStatic tag found, so we create it and the accompanying IsUnsupportedStation

					//debug:
					console.log("could not find an IsStatic tag, we're free to create a new one.");

					grid.appendChild(createNewTag("IsStatic", "true"));
					createUnsupportedTag(grid);

				}
			}

			function createNewTag(type_of_tag, content_of_tag) {

				//debug:
				console.log("Creating new tag of type " + type_of_tag + " with content of " + content_of_tag)

				let new_tag = document.createElementNS(null, type_of_tag);
				let tag_text = document.createTextNode(content_of_tag);
				new_tag.appendChild(tag_text);

				return new_tag;
			}

			function createUnsupportedTag(grid) {

				let existing_isunsupported_tag = grid.getElementsByTagName("IsUnsupportedStation")[0];

				if (typeof(existing_isunsupported_tag) != 'undefined' && existing_isunsupported_tag != null) {
					// exists

					//debug:
					console.log("also found an IsUnsupportedStation tag! It's currently set to " + existing_isunsupported_tag.firstChild.nodeValue);

				} else {
					//debug:
					console.log("There was no IsUnsupportedStation tag. Need to create one.");

					grid.appendChild(createNewTag("IsUnsupportedStation", "true"));

				}
			}

			//todo: provide a clickable download link if people so desire
			//https://ourcodeworld.com/articles/read/189/how-to-create-a-file-and-generate-a-download-with-javascript-in-the-browser-without-a-server

		</script>
		<script type="text/javascript">
			function clearother(which) {
				//clears whichever input field is the other one from which you touched last
				document.getElementById(which).value = null;
			}
		</script>
		<script type="text/javascript">
			function checkapisupport() {
				if (window.File && window.FileReader && window.FileList && window.Blob) {
					// Great success! All the File APIs are supported.
					// Carry on silently.
				} else {
					alert('The File APIs are not fully supported in this browser.');
				}
			}
		</script>
		<link rel="icon" type="image/x-icon" href="favicon.ico">
	</head>
	<body onload="checkapisupport()">
		<h1>Make station</h1>
		<p>This tool turns ALL large grids (except wheels on suspensions) into stations. May your deity of choice help you &hellip;</p>
		<p style="color: red; font-weight: bold;">Warning: Apparently, there's a distinction between supported and unsupported stations. Presumably this has something to do with stations with ground contact. This tool currently produces only unsupported station grids. This shouldn't be a problem because ships wouldn't be intersecting with the ground in the first place. That said, proceed with caution.</p>
		<p>To begin, please provide your <em>sandbox_0_0_0_.sbs</em> (<strong>not</strong> your <em>sandbox.sbc</em> file!!):</p>
		<p>Browse file system: <input id="sbs_file" type="file" name="sbs_file" accept="application/xml,.sbs" onchange="clearother('paste')"></p>
		<p>Or paste file contents (slow for MB-sized files):<br><textarea id="paste" rows="10" cols="80" onkeyup="clearother('sbs_file')"></textarea></p>
		<p><button onmouseup="loadsbs()">Make stations</button></p>
		<p>Your modified <em>sandbox_0_0_0_.sbs</em> file:</p>
		<p><textarea id="output" rows="10" cols="80" disabled="disabled"></textarea></p>
		<p>Remember to delete the caching file <em>sandbox_0_0_0_.sbsB5</em> before launching or it will take precedence over the SBS file!</p>
		<p>Deleting the SBSB5 file will cause SE to complain that "the file format is outdated". This is expected and shouldn't be a problem.</p>
		<p><a href="https://puddingofdoom.github.io/">More tools</a></p>
	</body>
</html>
